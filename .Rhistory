modeled[,1]<-as.POSIXct(modeled[,1],tz="",origin="1970-01-01")
outFile<-paste(path,"PPO43_observedAndPredicted_wholeDataSet.txt",sep="")
write.table(modeled,file=outFile, sep="\t",append = FALSE,row.names=FALSE,col.names=c("realTime","observed","predicted"))
OB(modeled[,2],modeled[,3],fitEval,fitFile,fitFileOut)
#Output2010<-output
#Output2011<-output
#Output2012<-output
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_testModelByYearPO43.R', echo=TRUE)
plot(projected,type="l",col="black",main="projected PPO43 from annual models",xlab="date",ylab="concentration",ylim=c(-0.05,0.5))
plot(projected,type="l",col="black",main="projected PPO43 from annual models",xlab="date",ylab="concentration",ylim=c(-0.05,01.5))
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_testModelByYearMES.R', echo=TRUE)
(projected,type="l",col="black",main="projected MES from annual models",xlab="date",ylab="concentration",ylim=c(-20,400))
outFi
plot(projected,type="l",col="black",main="projected MES from annual models",xlab="date",ylab="concentration",ylim=c(-20,400))
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_PO4.R', echo=TRUE)
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_PTOT.R', echo=TRUE)
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_MES.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_testModelByYearMES.R', echo=TRUE)
model
model[1]
modeled
modeled
dim(modeled)
dim(model)
dim(projected)
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_testModelByYearMES.R', echo=TRUE)
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_testModelByYearPO43.R', echo=TRUE)
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_testModelByYearPtot.R', echo=TRUE)
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_testModelByYearTurbidity.R', echo=TRUE)
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_NO3.R', echo=TRUE)
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_NO3.R', echo=TRUE)
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_testModelByYearNO3.R', echo=TRUE)
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_NO3.R', echo=TRUE)
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_testModelByYearNO3.R', echo=TRUE)
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_NNO3.R', echo=TRUE)
plot(output,type="l",col="black",main="projected NNO3",xlab="date",ylab="concentration")
output<-as.data.frame(matrix(0,ncol=2,nrow=length(realTime)))
output[,1]<-as.POSIXct(realTime,tz="UTC")
output[,2]<-round(Predict,5)
write.table(output,file=pTotFile, append = FALSE,row.names=FALSE,col.names=c("realTime","Predicted"))
plot(output,type="l",col="black",main="projected NNO3",xlab="date",ylab="concentration")
output<-as.data.frame(matrix(0,ncol=2,nrow=length(realTime)))
output[,1]<-as.POSIXct(realTime,tz="UTC")
output[,2]<-round(Predict,5)
write.table(output,file=pTotFile, append = FALSE,row.names=FALSE,col.names=c("realTime","Predicted"))
plot(output,type="l",col="black",main="projected NNO3",xlab="date",ylab="concentration",ylim=c(5,20))
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_testModelByYearNNO3.R', echo=TRUE)
projection<-as.data.frame(matrix(0,ncol=2,nrow=length(useUs)))
projection[,1]<-as.POSIXct(useUs,tz="UTC")
projection[,2]<-round(Predict,5)
write.table(projection,file=outFile, append = FALSE,row.names=FALSE,col.names=c("realTime","Predicted"))
plot(projection,type="l",col="black",main="projected NNO3",xlab="date",ylab="concentration")
projection<-as.data.frame(matrix(0,ncol=2,nrow=length(useUs)))
projection[,1]<-as.POSIXct(useUs,tz="UTC")
projection[,2]<-round(Predict,5)
write.table(projection,file=outFile, append = FALSE,row.names=FALSE,col.names=c("realTime","Predicted"))
plot(projection,type="l",col="black",main="projected NNO3",xlab="date",ylab="concentration",ylim=c(5,20))
for (i in 1:3){
startDate<-as.POSIXct(paste(startYear[i],"-08-01 00:00:00",sep=""),tz="gmt")
stopDate<-as.POSIXct(paste(stopYear[i],"-08-01 00:00:00",sep=""),tz="gmt")
useUsRealTIme<-(myData$realTime[(myData$realTime>startDate&myData$realTime<stopDate)])
#         keep<-!is.na(useUsRealTIme)
#useUsRealTIme<-useUsRealTIme[keep]
useUsFP<-(myData$fingerPrints[(myData$realTime>startDate&myData$realTime<stopDate),])
#useUsFP<-useUsFP[keep,]
useUsChem<-(myData$ChemData[(myData$realTime>startDate&myData$realTime<stopDate),])
#useUsChem<-useUsChem[keep,]
#numComp<-numberOfComponentsToUse(myData$fingerPrints,myData$ChemData$Turb)
numComp<-numberOfComponentsToUse(useUsFP,useUsChem$NNO3)
#numComp<-25
#pTotModel<-PLSRFitAndTest(myData$fingerPrints,myData$ChemData$Turb,myData$realTime,numComp,fitEval,fitFile,fitFileOut,0)
NNO3Model<-PLSRFitAndTest(useUsFP,useUsChem$NNO3,useUsRealTIme,numComp,fitEval,fitFile,fitFileOut,0)
#remove status and datetime
useUs<-(realTime[realTime>startDate&realTime<stopDate])
useUsfp<-fingerPrints[(realTime>startDate&realTime<stopDate) ,]
#USE THE MODEL TO PREDICT OUTPUT FOR THE WHOLE TIME PERIOD
#Predict<-predict(pTotModel$Fit,data.matrix(fingerPrints),ncomp=numComp,type=c("response"))
Predict<-predict(NNO3Model$Fit,data.matrix(useUsfp),ncomp=numComp,type=c("response"))
realTime[realTime<0]<-NA
#             badPoints<-is.na(realTime)
#             goodPoints<-!badPoints
#             timeAxis<-c(realTime[1],realTime[length(realTime)])
#             ylimits<-c(-0.25,2.5)
#             plot(realTime[goodPoints],Predict[goodPoints],ylim=ylimits,type="l")
#WRITE AN OUTPUT FILE WITH REALtIME, AND PREDICTED VALUES
outFile<-paste(path,"NNO3_projected",startYear[i],stopYear[i],".txt",sep="")
Predict<-as.matrix(Predict[,,1])
projection<-as.data.frame(matrix(0,ncol=2,nrow=length(useUs)))
projection[,1]<-as.POSIXct(useUs,tz="UTC")
projection[,2]<-round(Predict,5)
write.table(projection,file=outFile, append = FALSE,row.names=FALSE,col.names=c("realTime","Predicted"))
plot(projection,type="l",col="black",main="projected NNO3",xlab="date",ylab="concentration",ylim=c(5,20))
#WRITE ANOTHER FILE WITH REALTIME, OBSERVED AND PREDICTED VALUES
model<-as.data.frame(matrix(0,nrow=length(NNO3Model$ObservedAndPredicted[,3]),ncol=3))
model[,1]<-as.POSIXct(NNO3Model$ObservedAndPredicted[,3], origin="1970-01-01",tz="")
model[,2]<-round((NNO3Model$ObservedAndPredicted[,1]),5)
model[,3]<-round((NNO3Model$ObservedAndPredicted[,2]),5)
if(i==1){
modeled<-as.data.frame(matrix(0,nrow=1,ncol=3))
modeled<-rbind(modeled,model)
projected<-as.data.frame(matrix(0,nrow=1,ncol=2))
projected<-rbind(projected,projection)
}
if(i>1){
projected<-rbind(projected,projection)
modeled<-rbind(modeled,model)
}
outFile<-paste(path,"NNO3_observedAndPredicted",startYear[i],stopYear[i],".txt",sep="")
write.table(model,file=outFile, sep="\t",append = FALSE,row.names=FALSE,col.names=c("realTime","observed","predicted"))
}#endyearloop
projected<-projected[2:dim(projected)[1],]
projected[,1]<-as.POSIXct(projected[,1],tz="",origin="1970-01-01")
plot(projected,type="l",col="black",main="projected NNO3 from annual models",xlab="date",ylab="concentration",ylim=c(-20,400))
outFile<-paste(path,"NNO3_projected_wholeDataSet.txt",sep="")
write.table(projected,file=outFile, append = FALSE,row.names=FALSE,col.names=c("realTime","Predicted"))
modeled<-modeled[2:dim(modeled)[1],]
modeled[,1]<-as.POSIXct(modeled[,1],tz="",origin="1970-01-01")
outFile<-paste(path,"NNO3_observedAndPredicted_wholeDataSet.txt",sep="")
write.table(modeled,file=outFile, sep="\t",append = FALSE,row.names=FALSE,col.names=c("realTime","observed","predicted"))
OB(modeled[,2],modeled[,3],fitEval,fitFile,fitFileOut)
#Output2010<-output
#Output2011<-output
#Output2012<-output
projected[,1]<-as.POSIXct(projected[,1],tz="",origin="1970-01-01")
plot(projected,type="l",col="black",main="projected NNO3 from annual models",xlab="date",ylab="concentration",ylim=c(5,20))
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_testModelByYearNO3.R', echo=TRUE)
plot(projected,type="l",col="black",main="projected NO3 from annual models",xlab="date",ylab="concentration",ylim=c(0,100))
plot(projected,type="l",col="black",main="projected NO3 from annual models",xlab="date",ylab="concentration",ylim=c(0,90))
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_NO3.R', echo=TRUE)
plot(output,type="l",col="black",main="projected NO3",xlab="date",ylab="concentration",ylim=c(0,90))
output<-as.data.frame(matrix(0,ncol=2,nrow=length(realTime)))
output[,1]<-as.POSIXct(realTime,tz="UTC")
output[,2]<-round(Predict,5)
write.table(output,file=pTotFile, append = FALSE,row.names=FALSE,col.names=c("realTime","Predicted"))
plot(output,type="l",col="black",main="projected NO3",xlab="date",ylab="concentration",ylim=c(0,90))
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_CL.R', echo=TRUE)
output<-as.data.frame(matrix(0,ncol=2,nrow=length(realTime)))
output[,1]<-as.POSIXct(realTime,tz="UTC")
output[,2]<-round(Predict,5)
write.table(output,file=pTotFile, append = FALSE,row.names=FALSE,col.names=c("realTime","Predicted"))
plot(output,type="l",col="black",main="projected CL",xlab="date",ylab="concentration")
output<-as.data.frame(matrix(0,ncol=2,nrow=length(realTime)))
output[,1]<-as.POSIXct(realTime,tz="UTC")
output[,2]<-round(Predict,5)
write.table(output,file=pTotFile, append = FALSE,row.names=FALSE,col.names=c("realTime","Predicted"))
plot(output,type="l",col="black",main="projected CL",xlab="date",ylab="concentration",ylim=c(0,40))
output<-as.data.frame(matrix(0,ncol=2,nrow=length(realTime)))
output[,1]<-as.POSIXct(realTime,tz="UTC")
output[,2]<-round(Predict,5)
write.table(output,file=pTotFile, append = FALSE,row.names=FALSE,col.names=c("realTime","Predicted"))
plot(output,type="l",col="black",main="projected CL",xlab="date",ylab="concentration",ylim=c(10,40))
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_testModelByYearCL.R', echo=TRUE)
plot(projection,type="l",col="black",main="projected CL",xlab="date",ylab="concentration")
plot(projection,type="l",col="black",main="projected CL",xlab="date",ylab="concentration",ylim=c(-20,50))
plot(projected,type="l",col="black",main="projected CL from annual models",xlab="date",ylab="concentration",ylim=c(-20,40))
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_NO2.R', echo=TRUE)
plot(output,type="l",col="black",main="projected NO2",xlab="date",ylab="concentration")
output<-as.data.frame(matrix(0,ncol=2,nrow=length(realTime)))
output[,1]<-as.POSIXct(realTime,tz="UTC")
output[,2]<-round(Predict,5)
write.table(output,file=pTotFile, append = FALSE,row.names=FALSE,col.names=c("realTime","Predicted"))
plot(output,type="l",col="black",main="projected NO2",xlab="date",ylab="concentration")
plot(output,type="l",col="black",main="projected NO2",xlab="date",ylab="concentration",ylim=c(0,1))
output<-as.data.frame(matrix(0,ncol=2,nrow=length(realTime)))
output[,1]<-as.POSIXct(realTime,tz="UTC")
output[,2]<-round(Predict,5)
write.table(output,file=pTotFile, append = FALSE,row.names=FALSE,col.names=c("realTime","Predicted"))
plot(output,type="l",col="black",main="projected NO2",xlab="date",ylab="concentration",ylim=c(-0.25,0.9))
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_testModelByYearNO2.R', echo=TRUE)
useUsRealTIme
useUsChem
i
i
i
NO2Model<-PLSRFitAndTest(useUsFP,useUsChem$NO2,useUsRealTIme,numComp,fitEval,fitFile,fitFileOut,0)
useUsFP
useUsChem
useUsChem$NO2
i<-3
startDate<-as.POSIXct(paste(startYear[i],"-08-01 00:00:00",sep=""),tz="gmt")
stopDate<-as.POSIXct(paste(stopYear[i],"-08-01 00:00:00",sep=""),tz="gmt")
useUsRealTIme<-(myData$realTime[(myData$realTime>startDate&myData$realTime<stopDate)])
#         keep<-!is.na(useUsRealTIme)
#useUsRealTIme<-useUsRealTIme[keep]
useUsFP<-(myData$fingerPrints[(myData$realTime>startDate&myData$realTime<stopDate),])
#useUsFP<-useUsFP[keep,]
useUsChem<-(myData$ChemData[(myData$realTime>startDate&myData$realTime<stopDate),])
#useUsChem<-useUsChem[keep,]
#numComp<-numberOfComponentsToUse(myData$fingerPrints,myData$ChemData$Turb)
numComp<-numberOfComponentsToUse(useUsFP,useUsChem$NO2)
#numComp<-25
#pTotModel<-PLSRFitAndTest(myData$fingerPrints,myData$ChemData$Turb,myData$realTime,numComp,fitEval,fitFile,fitFileOut,0)
NO2Model<-PLSRFitAndTest(useUsFP,useUsChem$NO2,useUsRealTIme,numComp,fitEval,fitFile,fitFileOut,0)
useUsChem$NO2
myData$Chem$NO2
plot(myData$realTime,myData$Chem$NO2)
source('~/Documents/GitHub/Brittany/RUN-Brittany-Model_NNO2.R', echo=TRUE)
output<-as.data.frame(matrix(0,ncol=2,nrow=length(realTime)))
output[,1]<-as.POSIXct(realTime,tz="UTC")
output[,2]<-round(Predict,5)
write.table(output,file=pTotFile, append = FALSE,row.names=FALSE,col.names=c("realTime","Predicted"))
plot(output,type="l",col="black",main="projected NNO2",xlab="date",ylab="concentration",ylim=c(-0.1,0.4))
output<-as.data.frame(matrix(0,ncol=2,nrow=length(realTime)))
output[,1]<-as.POSIXct(realTime,tz="UTC")
output[,2]<-round(Predict,5)
write.table(output,file=pTotFile, append = FALSE,row.names=FALSE,col.names=c("realTime","Predicted"))
plot(output,type="l",col="black",main="projected NNO2",xlab="date",ylab="concentration",ylim=c(-0.05,0.4))
pTotFile<-paste(path,"NNO2_projected.txt",sep="")
Predict<-as.matrix(Predict[,,1])
output<-as.data.frame(matrix(0,ncol=2,nrow=length(realTime)))
output[,1]<-as.POSIXct(realTime,tz="UTC")
output[,2]<-round(Predict,5)
write.table(output,file=pTotFile, append = FALSE,row.names=FALSE,col.names=c("realTime","Predicted"))
plot(output,type="l",col="black",main="projected NNO2",xlab="date",ylab="concentration",ylim=c(-0.05,0.4))
output<-as.data.frame(matrix(0,nrow=length(NNO2Model$ObservedAndPredicted[,3]),ncol=3))
output[,1]<-as.POSIXct(NNO2Model$ObservedAndPredicted[,3], origin="1970-01-01",tz="")
output[,2]<-round((NNO2Model$ObservedAndPredicted[,1]),5)
output[,3]<-round((NNO2Model$ObservedAndPredicted[,2]),5)
pTotFile<-paste(path,"NNO2_observedAndPredicted.txt",sep="")
write.table(output,file=pTotFile, sep="\t",append = FALSE,row.names=FALSE,col.names=c("realTime","observed","predicted"))
library(oce) #used for despiking
library(hydroGOF) #forgot what I used this for
library(pls)  #Load the pls package
source('~/Documents/GitHub/Brittany/BrittanyFunctions.R')
#******Specify file paths and names
FPpath<-"C:\\Users\\FBLab\\Desktop\\workHere\\Data\\lkWhlr\\" #Specify folder where data is located
path<-"C:\\Users\\FBLab\\Desktop\\workHere\\Data\\"
fitPath<-"C:/Users/FBLab/Downloads/FITEVAL2_win/FITEVAL2_win/"  #fiteval_out.txt"
fitEval<-paste(fitPath,"fiteval",sep="")
fitFile<-paste(fitPath,"PLSR.in",sep="")
fitFileOut<-paste(fitPath,"PLSR_out.txt",sep="")
#filename<-c("S2010-2011TurbComp.fp" ,"S2011-2012TurbComp.fp","S2012-2013TurbComp.fp","S2013-2014TurbComp.fp")
#filename<-c("S2010-20111stDer.fp", "S2011-20121stDer.fp","S2012-20131stDer.fp","S2013-20141stDer.fp")
filename<-"LkWhlrFP.txt"
#filename<-c("S2010-20111stDerTurbComp.fp" ,"S2011-20121stDerTurbComp.fp","S2012-20131stDerTurbComp.fp","S2013-20141stDerTurbComp.fp")
#LOAD DATA FOR MODEL AND MAKE PLSR MODEL BASED ON WHAT WE KNOW ABOUT WHATEVER
ModelFilename<-c("LkWhlrTKN_Cal.cvs")
Chem<-c("TKN");
#            bestFitnComps<-c(16,10,12,4,5,20,5,16,5,16,5,5,6,4,3,11,10)
#           bestFitFiles<-c(2,2,2,2,3,4,2,1,1,3,3,3,3,2,2,2,2)
#read the data specified by the vector filename
myData<-loadDataFile(path,ModelFilename)
ModelFilename<-c("LkWhlrTKN_Cal.csv")
myData<-loadDataFile(path,ModelFilename)
myData<-loadDataFile(FPpath,ModelFilename)
myData
data<-read.table(file=paste(filepath,filename,sep=""),sep=",",header=TRUE,skip=0)
data<-read.table(file=paste(FPpath,ModelFilename,sep=""),sep=",",header=TRUE,skip=0)
data
data[,1]
View(data)
Date<-substr(data$Date.Time, 1, 10)
T<-substr(data$Date.Time, 12, 19)
T[T==""]="00:00:00"
D<-paste(Date,T,sep=" ")               #put back in the fixed values
D<-strptime(D, '%d/%m/%Y %H:%M:%S')    #convert it to a _flawless_ time opject
data$DateScan<-D                       #store it back in the matrix
realTime<-(data$DateScan)                                       #pull out time
data[,(dim(data)[2])]
data[,(dim(data)[2]-1)]
data[,(dim(data)[2]-2)]
#pull out time
ChemData<-data[,(dim(data)[2]-2)]            #pull out the analyte data
fingerPrints<-data[,-(dim(data)[2]-7):-(dim(data)[2])]
fingerPrints<-fingerPrints[,-1:-2]
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
TKNModel<-PLSRFitAndTest(fingerPrints,ChemData,realTime,numComp,fitEval,fitFile,fitFileOut,0)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
#numComp<-25
TKNModel<-PLSRFitAndTest(fingerPrints,ChemData,realTime,numComp,fitEval,fitFile,fitFileOut,0)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
#numComp<-25
TKNModel<-PLSRFitAndTest(fingerPrints,ChemData,realTime,numComp,fitEval,fitFile,fitFileOut,0)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
#numComp<-25
TKNModel<-PLSRFitAndTest(fingerPrints,ChemData,realTime,numComp,fitEval,fitFile,fitFileOut,0)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
#numComp<-25
TKNModel<-PLSRFitAndTest(fingerPrints,ChemData,realTime,numComp,fitEval,fitFile,fitFileOut,0)
numComp
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
#numComp<-25
TKNModel<-PLSRFitAndTest(fingerPrints,ChemData,realTime,numComp,fitEval,fitFile,fitFileOut,0)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
#numComp<-25
TKNModel<-PLSRFitAndTest(fingerPrints,ChemData,realTime,numComp,fitEval,fitFile,fitFileOut,0)
numComp
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
print(numComp)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
print(numComp)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
print(numComp)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
print(numComp)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
print(numComp)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
print(numComp)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
print(numComp)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
print(numComp)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
print(numComp)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
print(numComp)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
print(numComp)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
print(numComp)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
print(numComp)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
print(numComp)
numComp<-9
TKNModel<-PLSRFitAndTest(fingerPrints,ChemData,realTime,numComp,fitEval,fitFile,fitFileOut,0)
numComp<-9
TKNModel<-PLSRFitAndTest(fingerPrints,ChemData,realTime,numComp,fitEval,fitFile,fitFileOut,0)
numComp<-9
TKNModel<-PLSRFitAndTest(fingerPrints,ChemData,realTime,numComp,fitEval,fitFile,fitFileOut,0)
numComp<-9
TKNModel<-PLSRFitAndTest(fingerPrints,ChemData,realTime,numComp,fitEval,fitFile,fitFileOut,0)
numComp<-9
TKNModel<-PLSRFitAndTest(fingerPrints,ChemData,realTime,numComp,fitEval,fitFile,fitFileOut,0)
numComp<-9
TKNModel<-PLSRFitAndTest(fingerPrints,ChemData,realTime,numComp,fitEval,fitFile,fitFileOut,0)
numComp<-9
TKNModel<-PLSRFitAndTest(fingerPrints,ChemData,realTime,numComp,fitEval,fitFile,fitFileOut,0)
numComp<-25
TKNModel<-PLSRFitAndTest(fingerPrints,ChemData,realTime,numComp,fitEval,fitFile,fitFileOut,0)
numComp<-25
TKNModel<-PLSRFitAndTest(fingerPrints,ChemData,realTime,numComp,fitEval,fitFile,fitFileOut,0)
numComp<-20
TKNModel<-PLSRFitAndTest(fingerPrints,ChemData,realTime,numComp,fitEval,fitFile,fitFileOut,0)
numComp<-16
TKNModel<-PLSRFitAndTest(fingerPrints,ChemData,realTime,numComp,fitEval,fitFile,fitFileOut,0)
numComp<-16
TKNModel<-PLSRFitAndTest(fingerPrints,ChemData,realTime,numComp,fitEval,fitFile,fitFileOut,0)
numComp<-15
TKNModel<-PLSRFitAndTest(fingerPrints,ChemData,realTime,numComp,fitEval,fitFile,fitFileOut,0)
numComp<-14
TKNModel<-PLSRFitAndTest(fingerPrints,ChemData,realTime,numComp,fitEval,fitFile,fitFileOut,0)
TKNModel
summary(TKNModel$Fit)
numComp<-10
TKNModel<-PLSRFitAndTest(fingerPrints,ChemData,realTime,numComp,fitEval,fitFile,fitFileOut,0)
summary(TKNModel$Fit)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
numComp<-numberOfComponentsToUse(fingerPrints,ChemData)
help(plsr)
fpData<-read.table(file=paste(FPpath,filename,sep=""),sep=",",header=TRUE,skip=0)
fpData<-read.table(file=paste(FPpath,filename,sep=""),sep=",",header=TRUE,skip=0)
Date<-substr(fpData$Date.Time, 1, 10)        #the date
T<-substr(fpData$Date.Time, 12, 19)       #the time
T[T==""]="00:00:00"                    #ah, but where it should be midnight, often it was " "
D<-paste(Date,T,sep=" ")               #put back in the fixed values
D<-strptime(D, '%d/%m/%Y %H:%M:%S')    #convert it to a _flawless_ time opject
fpData$DateScan<-D
D<-paste(Date,T,sep=" ")
D
fpData<-read.table(file=paste(FPpath,filename,sep=""),sep=",",header=TRUE,skip=0)
Date<-substr(fpData$Date.Time, 1, 10)        #the date
T<-substr(fpData$Date.Time, 12, 19)
D
Date
fpData
fpData<-read.table(file=paste(FPpath,filename,sep=""),sep=",",header=TRUE,skip=1)
fpData$Date.Time
fpData<-read.table(file=paste(FPpath,filename,sep=""),sep="\t",header=TRUE,skip=1)
View(fpData)
fpData$Date.Time
Date<-substr(fpData$Date.Time, 1, 10)
T<-substr(fpData$Date.Time, 12, 19)
D<-paste(Date,T,sep=" ")
D<-strptime(D, '%d/%m/%Y %H:%M:%S')
fpData$DateScan<-D
View(fpData)
realTimeExp<-(fpData$DateScan)
fingerPrints[1,]
fingerPrints[1,200]
fingerPrints[1,224]
fingerPrints[,224]
fingerPrints[,223]
fpData[,223]
fpData[,222]
fpData[,221]
fpData[,220]
fpData[,219]
fpData[,218]
fingerPrints<-fpDdata[,-(dim(fpData)[2]-6):-(dim(fpData)[2])]
fpData[,-(dim(fpData)[2]-6):-(dim(fpData)[2])]
fpData[,-(dim(fpData)[2]-5):-(dim(fpData)[2])]
fpData[,-(dim(fpData)[2]-4):-(dim(fpData)[2])]
fpData[,-(dim(fpData)[2]-5):-(dim(fpData)[2])]
fingerPrints<-fpData[,-(dim(fpData)[2]-5):-(dim(fpData)[2])]
fingerPrints[,1]
fingerPrints[,2]
fingerPrints[,3]
fingerPrints<-fingerPrints[,-1:-2]
fingerPrints$DateScan
realTimeExp<-(fpData$DateScan)
fingerPrints<-fpData[,-(dim(fpData)[2]-5):-(dim(fpData)[2])]    #remove chemical data and the 4 columns of NaNs in 742.5-750 nM bins
fingerPrints<-fingerPrints[,-1:-2]
Predict<-predict(TKNModel$Fit,data.matrix(fingerPrints),ncomp=numComp,type=c("response"))
Predict
plot(Predict)
plot(realTimeExp,Predict)
realTime[realTime<0]<-NA
plot(realTimeExp,Predict)
min(Predict)
max(Predict)
plot(realTimeExp,Predict)
realTimeExp[realTimeExp<0]<-NA
plot(realTimeExp,Predict)
plot(realTimeExp)
realTimeExp
fpData$DateScan<-D
fpData$DateScan
fpData<-read.table(file=paste(FPpath,filename,sep=""),sep="\t",header=TRUE,skip=1)
Date<-substr(fpData$Date.Time, 1, 10)        #the date
T<-substr(fpData$Date.Time, 12, 19)       #the time
D<-paste(Date,T,sep=" ")               #put back in the fixed values
D<-strptime(D, '%d/%m/%Y %H:%M:%S')    #convert it to a _flawless_ time opject
fpData$DateScan<-D
fpData$DateScan
fpData
Date
T
D
T
D<-paste(Date,T,sep="")
strptime(D, '%d/%m/%Y %H:%M:%S')
D<-paste(Date,T,sep="")
D
as.POSIXct(D)
filename<-"LkWhlrFP.csv"
fpData<-read.table(file=paste(FPpath,filename,sep=""),sep=",",header=TRUE,skip=1)
Date<-substr(fpData$Date.Time, 1, 10)
Date
T<-substr(fpData$Date.Time, 12, 19)
T
D<-paste(Date,T,sep="")
D
D<-strptime(D, '%d/%m/%Y %H:%M:%S')
data<-read.table(file=paste(FPpath,ModelFilename,sep=""),sep=",",header=TRUE,skip=0)
Date<-substr(data$Date.Time, 1, 10)        #the date
T<-substr(data$Date.Time, 12, 19)
Date
T
T<-substr(fpData$Date.Time, 12, 19)
Date<-substr(fpData$Date.Time, 1, 10)        #the date
T<-substr(fpData$Date.Time, 12, 19)
T[T==""]="00:00:00"                    #ah, but where it should be midnight, often it was " "
T
D<-paste(Date,T,sep=" ")               #put back in the fixed values
D<-strptime(D, '%d/%m/%Y %H:%M:%S')    #convert it to a _flawless_ time opject
D
strptime(D, '%d.%m.%Y %H:%M:%S')
D<-paste(Date,T,sep="")
D
as.POSIXct(D)
fpData<-read.table(file=paste(FPpath,filename,sep=""),sep=",",header=TRUE,skip=1)
Date<-substr(fpData$Date.Time, 1, 10)
Date
T<-substr(fpData$Date.Time, 12, 19)       #the time
D<-paste(Date,T,sep="")               #put back in the fixed values
D<-strptime(D, '%d.%m.%Y %H:%M:%S')
D
Date
T<-substr(fpData$Date.Time, 12, 19)       #the time
T
fpData<-read.table(file=paste(FPpath,filename,sep=""),sep=",",header=TRUE,skip=1)
Date<-substr(fpData$Date.Time, 1, 10)        #the date
T<-substr(fpData$Date.Time, 12, 19)       #the time
D<-paste(Date,T,sep="")
D
D<-strptime(D, '%d/%m/%Y %H:%M:%S')    #convert it to a _flawless_ time opject
D
D
D<-paste(Date,T,sep="")
D
as.POSIX.ct(D)
as.POSIXct(D)
D<-paste(Date,T,sep=" ")
D
as.POSIXct(D)
as.POSIXct(D,tz="")
strptime(D, '%d/%m/%Y %H:%M:%S')
D
as.POSIXlt(D,tz="")
